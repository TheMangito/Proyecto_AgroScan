---
import MainLayout from '@/layouts/MainLayout.astro';
import Layout from '@/layouts/Layout.astro';
import Header from "@/components/Header.astro";
import "@/styles/global.css";
---
<MainLayout>
<section class="bg-[#1e1e1e] h-screen justify-center">
    <div class="items-center grid grid-cols-1 md:grid-cols-2 justify-center md:pl-10 md:pr-10 md:pb-5 pl-2 pr-2 pb-2">
        <h1 class="text-[#f0f1f1] font-bold md:text-5xl text-3xl">Cámaras</h1>
        <div class="bg-[#262626] rounded-xl p-3 shadow flex flex-row gap-2 items-end justify-end md:gap-1 md:p-6">
            <h2 class="text-lg font-semibold min-w-[30%] md:text-2xl">Temporizador de Captura</h2>
            <p id="temporizador" class="text-xl font-mono font-bold min-w-[30%] md:text-3xl">00:00:00</p>
            <p class="text-xs text-gray-300 min-w-[30%] md:text-sm">Restantes</p>
        </div>
        <p class="text-[#f0f1f1] md:text-base text-sm">Monitorea las camaras de las zonas de cultivo</p>
    </div><br>
    <div class="grid md:grid-cols-3 sm:grid-cols-2 justify-between">
        <div class="bg-[#272726] p-4 m-4 w-1/6 sm:w-3/5">
            <p class="text-[#f0f1f1] flex flex-row"><svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-adjustments-horizontal p-0.5"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 6l8 0" /><path d="M16 6l4 0" /><path d="M8 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 12l2 0" /><path d="M10 12l10 0" /><path d="M17 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 18l11 0" /><path d="M19 18l1 0" /></svg> Zona:    
                <select id="opciones" class="bg-[#272726]" name="">
                <option value="1">Todas</option>
                <option value="1">Zona #1</option>
                <option value="2">Zona #2</option>
                <option value="3">Zona #3</option>
            </select></p>
        </div>
        <div class="bg-[#272726] p-4 m-4 w-1/6 sm:w-3/5">
            <p class="text-[#f0f1f1] flex flex-row"><svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-adjustments-horizontal p-0.5"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 6l8 0" /><path d="M16 6l4 0" /><path d="M8 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 12l2 0" /><path d="M10 12l10 0" /><path d="M17 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 18l11 0" /><path d="M19 18l1 0" /></svg> Estado:    
                <select id="opciones1" class="bg-[#272726]" name="">
                <option value="1">Todas</option>
                <option value="1">Alerta temprana</option>
                <option value="2">Infección crítica</option>
                <option value="3">Sin alertas</option>
            </select></p>
        </div>
        <div class="bg-[#272726] p-4 m-4 w-1/6 sm:w-3/5">
            <p class="text-[#f0f1f1]">Buscar</p>
        </div>
    </div>
    <h2 class="text-[#f0f1f1] font-medium md:text-3xl md:pl-10 md:pr-10 pl-2 pr-2 text-lg">Zona #1</h2><br>
    <div class="grid grid-cols-1 md:grid-cols-3 md:pl-10 md:pr-10 md:pb-5 md:gap-20 pl-2 pr-2 pb-4 gap-6">
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <video
                id="camera1"
                class="w-full h-auto rounded-lg mt-2 min-h-[50%]"
                autoplay
                playsinline
                muted
            ></video>
            <canvas id="miCanvas" style="display: none;"></canvas>

            <button id="screenshot-vid-recording" class="bg-[#272726] text-[#f0f1f1] rounded-lg p-2 mt-2 w-full hover:bg-[#3a3a3a]">
                Capturar
            </button>
        </div>
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <img src="/images/image 3.png" class="w-full h-auto rounded-lg mt-2 min-h-[50%]" alt="Camara #1" />
        </div>
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <img src="/images/image 3.png" class="w-full h-auto rounded-lg mt-2 min-h-[50%]" alt="Camara #1" />
        </div>
    </div><br>
    <h2 class="text-[#f0f1f1] font-medium md:text-3xl md:pl-10 md:pr-10 pl-2 pr-2 text-lg">Zona #2</h2><br>
    <div class="grid grid-cols-1 md:grid-cols-3 md:pl-10 md:pr-10 md:pb-5 md:gap-20 pl-2 pr-2 pb-4 gap-6">
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <img src="/images/image 3.png" class="w-full h-auto rounded-lg mt-2 min-h-[50%]" alt="Camara #1" />
        </div>
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <img src="/images/image 3.png" class="w-full h-auto rounded-lg mt-2 min-h-[50%]" alt="Camara #1" />
        </div>
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <img src="/images/image 3.png" class="w-full h-auto rounded-lg mt-2 min-h-[50%]" alt="Camara #1" />
        </div>
    </div>
    <script type="module">
      // ——————————————————————————————————————————————————————————————
      // 1) REFERENCIAS A ELEMENTOS
      // ——————————————————————————————————————————————————————————————
      const video = document.getElementById("camera1");
      const canvas = document.getElementById("miCanvas");
      const screenshotButton = document.getElementById("screenshot-vid-recording");
      const temporizadorDisplay = document.querySelector("#temporizador");

      // ——————————————————————————————————————————————————————————————
      // 2) CAPTURA + ENVÍO AL BACKEND (FastAPI en http://localhost:8000/predict)
      // ——————————————————————————————————————————————————————————————
      async function captureAndSend() {
        console.log(new Date(), "→ Iniciando captureAndSend()");

        // 1) Verificar que el video esté listo
        if (!video || video.readyState < 2) {
          console.warn("El video aún no está listo para capturar.");
          return;
        }

        // 2) Ajustar dimensiones del canvas al video
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext("2d");
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        // 3) Obtener Blob en formato JPEG (podría ser "image/png" si lo deseas)
        canvas.toBlob(
          async (blob) => {
            if (!blob) {
              console.error("No se pudo obtener blob del canvas.");
              return;
            }

            // OPCIONAL: mostrar la imagen capturada en pantalla (por 5 segundos)
            {
              const url = URL.createObjectURL(blob);
              const img = new Image();
              img.src = url;
              // Ajusta dónde pegas la imagen; aquí la anexamos al body al final
              document.body.appendChild(img);
              setTimeout(() => {
                URL.revokeObjectURL(url);
                img.remove();
              }, 5000);
            }

            // 4) Preparar FormData para enviar al servidor
            const formData = new FormData();
            // El campo "file" debe coincidir con el parámetro UploadFile de FastAPI
            formData.append("file", blob, "capture.jpg");

            // 5) Hacer fetch al endpoint /predict
            try {
              const response = await fetch("http://localhost:8000/predict", {
                method: "POST",
                body: formData,
              });

              if (!response.ok) {
                // Si no es 2xx, extraer detalle de error (JSON con { detail: "..." })
                let detalle = "Error desconocido en el backend";
                try {
                  const errJson = await response.json();
                  detalle = errJson.detail || detalle;
                } catch (_){}
                throw new Error(detalle);
              }

              // 6) Procesar la respuesta JSON
              const data = await response.json();
              // Supongamos que data.result es algo como "Necesita Atencion" / "Saludable"
              alert(`🔔 Resultado del modelo: ${data.result}`);
            } catch (err) {
              console.error("Error en fetch /predict:", err);
              alert(`❌ Ocurrió un error al enviar la imagen: ${err.message}`);
            }
          },
          "image/jpeg",
          0.9 // Calidad JPEG, puedes cambiar o usar "image/png"
        );
      }

      // ——————————————————————————————————————————————————————————————
      // 3) FUNCIÓN doSomething PARA EL TEMPORIZADOR
      // ——————————————————————————————————————————————————————————————
      function doSomething() {
        console.log("¡Temporizador llegó a 0! Ejecutando captureAndSend()…");
        captureAndSend();
      }

      // ——————————————————————————————————————————————————————————————
      // 4) START SYNCED COUNTDOWN (Mantener tu lógica, pero llamar a doSomething)
      // ——————————————————————————————————————————————————————————————
      async function startSyncedCountdown(display) {
        // ① Pedir la hora del servidor
        const t0Client = Date.now();
        const { now: t0Server } = await fetch("/api/servertime").then((r) =>
          r.json()
        );
        const drift = t0Client - t0Server; // ms que adelanta el reloj local

        // ② Calcular el próximo “top-of-hour” (minuto 0)
        let nextTick = Math.ceil(t0Server / 3.6e6) * 3.6e6; // 3.6e6 = 60 minutos en milis

        function update() {
          const actualServerTime = Date.now() - drift;
          const diff = nextTick - actualServerTime; // ms hasta el siguiente tick
          const secs = Math.max(0, Math.floor(diff / 1000));

          const hh = String(Math.floor(secs / 3600)).padStart(2, "0");
          const mm = String(Math.floor((secs % 3600) / 60)).padStart(2, "0");
          const ss = String(secs % 60).padStart(2, "0");
          display.textContent = `${hh}:${mm}:${ss}`;

          if (secs === 0) {
            // Cuando llega a cero → ejecuta doSomething() y recalcula nextTick
            doSomething();

            // Avanzar nextTick a la siguiente hora (para que no se quede atascado)
            while (nextTick <= actualServerTime) {
              nextTick += 3.6e6;
            }
          }
        }

        // Hacer la primera actualización inmediatamente, luego cada segundo
        update();
        setInterval(update, 1000);
      }

      // ——————————————————————————————————————————————————————————————
      // 5) CONFIGURAR TODO AL CARGAR DOM
      // ——————————————————————————————————————————————————————————————
      document.addEventListener("DOMContentLoaded", () => {
        // 5.1) Arrancar getUserMedia en el <video id="camera1">
        (async () => {
          if (!navigator.mediaDevices?.getUserMedia) {
            console.warn("getUserMedia no es soportado en este navegador");
            return;
          }
          try {
            const stream = await navigator.mediaDevices.getUserMedia({
              video: true,
            });
            video.srcObject = stream;
          } catch (err) {
            console.error("Error al acceder a la cámara:", err);
          }
        })();

        // 5.2) Al botón “Capturar” le asignamos nuestra nueva función captureAndSend
        screenshotButton.addEventListener("click", (e) => {
          e.preventDefault();
          captureAndSend();
        });

        // 5.3) Listener global para la tecla “C” o “c”
        document.addEventListener("keydown", (e) => {
          if (e.key === "c" || e.key === "C") {
            console.log("Tecla C presionada → captureAndSend()");
            captureAndSend();
          }
        });

        // 5.4) Iniciar temporizador si existe el elemento #temporizador
        if (temporizadorDisplay) {
          startSyncedCountdown(temporizadorDisplay);
        }
      });
    </script>
    <!-- ------------------- FIN BLOQUE DE SCRIPT ------------------- -->
    
</section>

