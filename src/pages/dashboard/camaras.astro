---
import MainLayout from '@/layouts/MainLayout.astro';
import Layout from '@/layouts/Layout.astro';
import Header from "@/components/Header.astro";
import "@/styles/global.css";
---
<MainLayout>
<section class="bg-[#1e1e1e] h-screen justify-center">
    <div class="items-center grid grid-cols-1 md:grid-cols-2 justify-center md:pl-10 md:pr-10 md:pb-5 pl-2 pr-2 pb-2">
        <h1 class="text-[#f0f1f1] font-bold md:text-5xl text-3xl">Cámaras</h1>
        <div class="bg-[#262626] rounded-xl p-3 shadow flex flex-row gap-2 items-end justify-end md:gap-1 md:p-6">
            <h2 class="text-lg font-semibold min-w-[30%] md:text-2xl">Temporizador de Captura</h2>
            <p id="temporizador" class="text-xl font-mono font-bold min-w-[30%] md:text-3xl">00:00:00</p>
            <p class="text-xs text-gray-300 min-w-[30%] md:text-sm">Restantes</p>
        </div>
        <p class="text-[#f0f1f1] md:text-base text-sm">Monitorea las camaras de las zonas de cultivo</p>
    </div><br>
    <div class="grid md:grid-cols-3 sm:grid-cols-2 justify-between">
        <div class="bg-[#272726] p-4 m-4 w-1/6 sm:w-3/5">
            <p class="text-[#f0f1f1] flex flex-row"><svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-adjustments-horizontal p-0.5"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 6l8 0" /><path d="M16 6l4 0" /><path d="M8 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 12l2 0" /><path d="M10 12l10 0" /><path d="M17 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 18l11 0" /><path d="M19 18l1 0" /></svg> Zona:    
                <select id="opciones" class="bg-[#272726]" name="">
                <option value="1">Todas</option>
                <option value="1">Zona #1</option>
                <option value="2">Zona #2</option>
                <option value="3">Zona #3</option>
            </select></p>
        </div>
        <div class="bg-[#272726] p-4 m-4 w-1/6 sm:w-3/5">
            <p class="text-[#f0f1f1] flex flex-row"><svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-adjustments-horizontal p-0.5"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 6l8 0" /><path d="M16 6l4 0" /><path d="M8 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 12l2 0" /><path d="M10 12l10 0" /><path d="M17 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 18l11 0" /><path d="M19 18l1 0" /></svg> Estado:    
                <select id="opciones1" class="bg-[#272726]" name="">
                <option value="1">Todas</option>
                <option value="1">Alerta temprana</option>
                <option value="2">Infección crítica</option>
                <option value="3">Sin alertas</option>
            </select></p>
        </div>
        <div class="bg-[#272726] p-4 m-4 w-1/6 sm:w-3/5">
            <p class="text-[#f0f1f1]">Buscar</p>
        </div>
    </div>
    <h2 class="text-[#f0f1f1] font-medium md:text-3xl md:pl-10 md:pr-10 pl-2 pr-2 text-lg">Zona #1</h2><br>
    <div class="grid grid-cols-1 md:grid-cols-3 md:pl-10 md:pr-10 md:pb-5 md:gap-20 pl-2 pr-2 pb-4 gap-6">
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <video
                id="camera1"
                class="w-full h-auto rounded-lg mt-2 min-h-[50%]"
                autoplay
                playsinline
                muted
            ></video>
            <button id="screenshot-vid-recording" class="bg-[#272726] text-[#f0f1f1] rounded-lg p-2 mt-2 w-full hover:bg-[#3a3a3a]">
                Capturar
            </button>
        </div>
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <img src="/images/image 3.png" class="w-full h-auto rounded-lg mt-2 min-h-[50%]" alt="Camara #1" />
        </div>
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <img src="/images/image 3.png" class="w-full h-auto rounded-lg mt-2 min-h-[50%]" alt="Camara #1" />
        </div>
    </div><br>
    <h2 class="text-[#f0f1f1] font-medium md:text-3xl md:pl-10 md:pr-10 pl-2 pr-2 text-lg">Zona #2</h2><br>
    <div class="grid grid-cols-1 md:grid-cols-3 md:pl-10 md:pr-10 md:pb-5 md:gap-20 pl-2 pr-2 pb-4 gap-6">
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <img src="/images/image 3.png" class="w-full h-auto rounded-lg mt-2 min-h-[50%]" alt="Camara #1" />
        </div>
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <img src="/images/image 3.png" class="w-full h-auto rounded-lg mt-2 min-h-[50%]" alt="Camara #1" />
        </div>
        <div class="bg-[#262626] rounded-xl p-6 shadow">
            <div class="flex flex-row items-center justify-between">
                <p class="font-bold text-base md:text-lg">Camara #1</p>
                <p class="md:text-base text-sm">Infección crítica</p>
            </div><br>
            <img src="/images/image 3.png" class="w-full h-auto rounded-lg mt-2 min-h-[50%]" alt="Camara #1" />
        </div>
    </div>
    <script type="module">
        (async () => {
            const video = document.getElementById('camera1');
            if (!navigator.mediaDevices?.getUserMedia) {
                console.warn('getUserMedia no soportado en este navegador');
                return;
            }
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                video.srcObject = stream;
            } catch (err) {
                console.error('Error al acceder a la cámara:', err);
            }
        })();
        var screenshotButton = document.getElementById("screenshot-vid-recording");
        screenshotButton.addEventListener("click", onCapture);

        var canvas = document.createElement("canvas")
        async function onCapture() {

            const video = document.getElementById("camera1");
            // 2) Verificar que el video esté listo
            if (video.readyState < 2) {
                return;
            }

            // 3) Dibujar el frame actual en el canvas
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const ctx = canvas.getContext("2d");
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            
            // 4) Convertir el canvas a Base64 (PNG)
            const dataURL = canvas.toDataURL("image/png");
            const base64Data = dataURL.split(",")[1]; // quitamos “data:image/png;base64,”

            try {
                const respuesta = await fetch("/api/save-image", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ base64: base64Data }),
              });

              const json = await respuesta.json();
              if (!respuesta.ok || !json.success) {
                throw new Error(json.message || "Error desconocido");
                }
                console.log("Imagen guardada con ID:", json.id);
                //statusEl.style.color = "limegreen";
                //statusEl.textContent = `Imagen guardada con ID: ${json.id}`;
            } catch (err) {
                console.error("Error enviando al servidor:", err);
                //statusEl.style.color = "red";
                //statusEl.textContent = `Error: ${err.message}`;
            };
        }
    </script>
    <script lang="js">
        async function startSyncedCountdown(display) {
        // ① Pide la hora exacta del servidor
        const t0Client = Date.now();
        const { now: t0Server } = await fetch('/api/servertime')
                                            .then(r => r.json());
        const drift = t0Client - t0Server;   // ms que adelanta el reloj local

        // ② Calcula el próximo “top-of-hour” (minuto 0)
        const nextTick = Math.ceil(t0Server / 3.6e6) * 3.6e6; // 3.6e6 = 60 min

        function update() {
            // hora real = reloj local - drift
            const diff   = nextTick - (Date.now() - drift);  // ms hasta el siguiente tick
            const secs   = Math.max(0, Math.floor(diff / 1000));

            const hh = String(Math.floor(secs / 3600)).padStart(2, '0');
            const mm = String(Math.floor((secs % 3600) / 60)).padStart(2, '0');
            const ss = String(secs % 60).padStart(2, '0');
            display.textContent = `${hh}:${mm}:${ss}`;

            if (secs === 0) {
            // ③ Llegó a cero → tu acción y reinicio
            doSomething();                   // <-- tu función
            while (nextTick <= (Date.now() - drift)) nextTick += 3.6e6;
            }
        }

        update();
        setInterval(update, 1000);
        }

        function doSomething() {
        console.log('¡Hora completada! Ejecutando acción…');
        // Por ejemplo:
        // fetch('/api/genera-reporte', { method: 'POST' });
        }

        document.addEventListener('DOMContentLoaded', () => {
        const display = document.querySelector('#temporizador');
        if (display) startSyncedCountdown(display);
        });

    </script>
</section>

